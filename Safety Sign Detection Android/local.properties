## This file must *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
#Mon Aug 02 19:10:26 IST 2021
vBuffer.get(nv21,=ySize, vSize);
private=Bitmap imgToBitmap(Image image) {
.inflate()=
import=java.util.ArrayList;
tts.speak("Danger=Detected", TextToSpeech.QUEUE_FLUSH, null);
yBuffer.get(nv21,=0, ySize);
for=(Result r \: results) {
mResults=results;
matrix.postRotate(90.0f);=
float=ivScaleY \= (float) mResultView.getHeight() / bitmap.getHeight();
mModule=LiteModuleLoader.load(MainActivity.assetFilePath(getApplicationContext(), "best.torchscript.ptl"));
Bitmap=resizedBitmap \= Bitmap.createScaledBitmap(bitmap, PrePostProcessor.mInputWidth, PrePostProcessor.mInputHeight, true);
sdk.dir=C\:\\Users\\Asus\\AppData\\Local\\Android\\Sdk
Matrix=matrix \= new Matrix();
public=AnalysisResult(ArrayList<Result> results) {
protected=AnalysisResult analyzeImage(ImageProxy image, int rotationDegrees) {
YuvImage=yuvImage \= new YuvImage(nv21, ImageFormat.NV21, image.getWidth(), image.getHeight(), null);
yuvImage.compressToJpeg(new=Rect(0, 0, yuvImage.getWidth(), yuvImage.getHeight()), 75, out);
bitmap=Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
Image.Plane[]=planes \= image.getPlanes();
@Nullable=
if=(mModule \=\= null) {
vibrator.cancel();=
mResultView.setResults(result.mResults);=
//=Log.e("model outputs \: ", results);
@Override=
static=class AnalysisResult {
package=ca.lakeheadu.cv.objectdetection;
.findViewById(R.id.object_detection_texture_view);=
uBuffer.get(nv21,=ySize + vSize, uSize);
Toast.makeText(getApplicationContext(),="Danger Detected", Toast.LENGTH_LONG).show();
ByteArrayOutputStream=out \= new ByteArrayOutputStream();
ByteBuffer=vBuffer \= planes[2].getBuffer();
int=vSize \= vBuffer.remaining();
byte[]=imageBytes \= out.toByteArray();
mResultView=findViewById(R.id.resultView);
Log.e("model=outputs \: ", r.toString());
@WorkerThread=
vibrator.vibrate(vibrationEffect1);=
IValue[]=outputTuple \= mModule.forward(IValue.from(inputTensor)).toTuple();
final=ArrayList<Result> results \= PrePostProcessor.outputsToNMSPredictions(outputs, imgScaleX, imgScaleY, ivScaleX, ivScaleY, 0, 0);
try={
mResultView.invalidate();=
}=
return=new AnalysisResult(results);
Log.e("Object=Detection", "Error reading assets", e);
